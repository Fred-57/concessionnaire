// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id          String       @id @db.Uuid
  name        String
  type        CompanyType
  drivers     Driver[]
  motorcycles Motorcycle[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Driver {
  id                        String   @id @db.Uuid
  name                      String
  license                   License
  numberOfYearsOfExperience Int
  company                   Company  @relation(fields: [companyId], references: [id])
  companyId                 String   @db.Uuid
  rentals                   Rental[]
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
}

model Model {
  id             String       @id @db.Uuid
  name           String
  repairMileage  Int
  repairDeadline Int
  motorcycles    Motorcycle[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  rappelSendAt   DateTime?
}

model Motorcycle {
  // Vehicle Identification Number (VIN)
  id                  String           @id
  mileage             Int
  dateOfCommissioning DateTime
  status              MotorcycleStatus
  company             Company          @relation(fields: [companyId], references: [id])
  companyId           String           @db.Uuid
  model               Model            @relation(fields: [modelId], references: [id])
  modelId             String           @db.Uuid
  guarantee           Guarantee?       @relation(fields: [guaranteeId], references: [id])
  guaranteeId         String?          @db.Uuid
  rentals             Rental[]
  maintenances        Maintenance[]
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
}

model Rental {
  id               String      @id @db.Uuid
  startDate        DateTime
  durationInMonths Int
  type             RentalType
  driver           Driver      @relation(fields: [driverId], references: [id])
  driverId         String      @db.Uuid
  motorcycle       Motorcycle  @relation(fields: [motorcycleId], references: [id])
  motorcycleId     String
  breakdowns       Breakdown[]
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}

model Breakdown {
  id          String                     @id @db.Uuid
  date        DateTime
  description String
  status      StatusMaintenanceBreakdown @default(PENDING)
  totalCost   Float?                     @default(0)
  rental      Rental                     @relation(fields: [rentalId], references: [id])
  rentalId    String                     @db.Uuid
  parts       BreakdownPart[]
  createdAt   DateTime                   @default(now())
  updatedAt   DateTime                   @updatedAt
}

model Maintenance {
  id             String                     @id @db.Uuid
  date           DateTime
  recommendation String
  status         StatusMaintenanceBreakdown @default(PENDING)
  totalCost      Float?                     @default(0)
  motorcycle     Motorcycle                 @relation(fields: [motorcycleId], references: [id])
  motorcycleId   String
  parts          MaintenancePart[]
  createdAt      DateTime                   @default(now())
  updatedAt      DateTime                   @updatedAt
}

model Guarantee {
  id               String          @id @db.Uuid
  name             String
  durationInMonths Int
  coveredAmount    Float
  motorcycles      Motorcycle[]
  parts            GuaranteePart[]
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model Part {
  id               String            @id @db.Uuid
  reference        String
  name             String
  cost             Float
  stock            Int
  guaranteeParts   GuaranteePart[]
  breakdownParts   BreakdownPart[]
  maintenanceParts MaintenancePart[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model BreakdownPart {
  breakdown   Breakdown @relation(fields: [breakdownId], references: [id])
  breakdownId String    @db.Uuid
  part        Part      @relation(fields: [partId], references: [id])
  partId      String    @db.Uuid
  quantity    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@id([breakdownId, partId])
}

model MaintenancePart {
  maintenance   Maintenance @relation(fields: [maintenanceId], references: [id])
  maintenanceId String      @db.Uuid
  part          Part        @relation(fields: [partId], references: [id])
  partId        String      @db.Uuid
  quantity      Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@id([maintenanceId, partId])
}

model GuaranteePart {
  guarantee   Guarantee @relation(fields: [guaranteeId], references: [id])
  guaranteeId String    @db.Uuid
  part        Part      @relation(fields: [partId], references: [id])
  partId      String    @db.Uuid
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@id([guaranteeId, partId])
}

enum CompanyType {
  CAR_DEALER
  PARTNER
}

enum License {
  A
  A2
}

enum RentalType {
  RENTAL
  TRIAL
}

enum MotorcycleStatus {
  RENTED
  AVAILABLE
  IN_REPAIR
  IN_MAINTENANCE
}

enum StatusMaintenanceBreakdown {
  PENDING
  DONE
  CANCELED
}
